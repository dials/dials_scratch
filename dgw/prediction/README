=====================
Reflection prediction
=====================

.. David Waterman 2012-10-17
   This document is reStructuredText.

Development of reflection prediction class(es) that use the current state of the 
experimental models to predict X, Y, phi for a reflection hkl. The experimental
models are, for example as of rev274 and cctbx rev16101:

* ``bpcx_regression.crystal_model.crystal``
* ``bpcx_regression.source_model.source``
* ``rstbx.bpcx.detector_model.instrument_specifics.pilatus``
* ``bpcx_regression.goniometer_model.goniometer``

The current use cases use C++ classes that are exposed to Python as
``rotation_angles`` and ``reflection_prediction``. Reasons for moving away
from these classes are:

* ``rotation_angles`` uses the Rossmann frame, so needs conversion of UB and the
  gonio axis to use it
* these classes do not update with the models - you need to construct a new
  object each time anything changes (not good for refinement code!)
* It is not easy to make changes to these classes as other code depends on them
  and it is C++
* ``reflection_prediction`` is not set up for detectors with multiple sensors,
  whereas the ``reflection_predictor`` class in ``rstbx.bpcx.detector_model.detector``
  is work-in-progress to do just that.

As mentioned in the last point, there is already a class for calculating X, Y
intersection coordinates for a detector (in fact, a list of multiple sensors).
However, we still require the prediction of reflecting angle for hkl. The code
here is written to address that.

References
==========

Refer to bpcx_regression/doc/prediction for the formulae.
