function _dials_index_hints ()
{
 case "$1" in

  refinement.parameterisation.beam.*)
    H="refinement.parameterisation.beam.fix= refinement.parameterisation.beam.fix_list=";;

  refinement.parameterisation.detector.*)
    H="refinement.parameterisation.detector.fix= refinement.parameterisation.detector.fix_list= refinement.parameterisation.detector.hierarchy_level= refinement.parameterisation.detector.panels=";;

  refinement.parameterisation.auto_reduction.*)
    H="refinement.parameterisation.auto_reduction.action= refinement.parameterisation.auto_reduction.min_nref_per_parameter=";;

  refinement.parameterisation.crystal.*)
    H="refinement.parameterisation.crystal.UB_model_per= refinement.parameterisation.crystal.absolute_num_intervals= refinement.parameterisation.crystal.cell_fix_list= refinement.parameterisation.crystal.fix= refinement.parameterisation.crystal.interval_width_degrees= refinement.parameterisation.crystal.num_intervals= refinement.parameterisation.crystal.orientation_fix_list= refinement.parameterisation.crystal.scan_varying=";;

  refinement.parameterisation.*)
    H="refinement.parameterisation.auto_reduction. refinement.parameterisation.beam. refinement.parameterisation.crystal. refinement.parameterisation.detector. refinement.parameterisation.sparse= refinement.parameterisation.treat_single_image_as_still=";;

  refinement.refinery.*)
    H="refinement.refinery.engine= refinement.refinery.log= refinement.refinery.max_iterations= refinement.refinery.track_gradient= refinement.refinery.track_out_of_sample_rmsd= refinement.refinery.track_parameter_correlation= refinement.refinery.track_step=";;

  refinement.reflections.weighting_strategy.*)
    H="refinement.reflections.weighting_strategy.constants= refinement.reflections.weighting_strategy.delpsi_constant= refinement.reflections.weighting_strategy.override=";;

  refinement.reflections.outlier.mcd.*)
    H="refinement.reflections.outlier.mcd.alpha= refinement.reflections.outlier.mcd.k1= refinement.reflections.outlier.mcd.k2= refinement.reflections.outlier.mcd.k3= refinement.reflections.outlier.mcd.max_n_groups= refinement.reflections.outlier.mcd.min_group_size= refinement.reflections.outlier.mcd.n_trials= refinement.reflections.outlier.mcd.threshold_probability=";;

  refinement.reflections.outlier.sauter_poon.*)
    H="refinement.reflections.outlier.sauter_poon.pdf= refinement.reflections.outlier.sauter_poon.px_sz= refinement.reflections.outlier.sauter_poon.verbose=";;

  refinement.reflections.outlier.*)
    H="refinement.reflections.outlier.algorithm= refinement.reflections.outlier.mcd. refinement.reflections.outlier.minimum_number_of_reflections= refinement.reflections.outlier.sauter_poon. refinement.reflections.outlier.separate_experiments= refinement.reflections.outlier.separate_panels= refinement.reflections.outlier.tukey.iqr_multiplier=";;

  refinement.reflections.*)
    H="refinement.reflections.block_width= refinement.reflections.close_to_spindle_cutoff= refinement.reflections.maximum_sample_size= refinement.reflections.minimum_sample_size= refinement.reflections.outlier. refinement.reflections.random_seed= refinement.reflections.reflections_per_degree= refinement.reflections.use_all_reflections= refinement.reflections.weighting_strategy.";;

  refinement.target.*)
    H="refinement.target.absolute_cutoffs= refinement.target.bin_size_fraction= refinement.target.gradient_calculation_blocksize= refinement.target.rmsd_cutoff=";;

  refinement.*)
    H="refinement.mp.nproc= refinement.parameterisation. refinement.refinery. refinement.reflections. refinement.target. refinement.verbosity=";;

  output.*)
    H="output.experiments= output.reflections= output.unindexed_reflections=";;

  indexing.fft3d.reciprocal_space_grid.*)
    H="indexing.fft3d.reciprocal_space_grid.d_min= indexing.fft3d.reciprocal_space_grid.n_points=";;

  indexing.fft3d.*)
    H="indexing.fft3d.peak_search= indexing.fft3d.peak_volume_cutoff= indexing.fft3d.reciprocal_space_grid.";;

  indexing.multiple_lattice_search.cluster_analysis.dbscan.*)
    H="indexing.multiple_lattice_search.cluster_analysis.dbscan.eps= indexing.multiple_lattice_search.cluster_analysis.dbscan.min_samples=";;

  indexing.multiple_lattice_search.cluster_analysis.hcluster.linkage.*)
    H="indexing.multiple_lattice_search.cluster_analysis.hcluster.linkage.method= indexing.multiple_lattice_search.cluster_analysis.hcluster.linkage.metric=";;

  indexing.multiple_lattice_search.cluster_analysis.hcluster.*)
    H="indexing.multiple_lattice_search.cluster_analysis.hcluster.cutoff= indexing.multiple_lattice_search.cluster_analysis.hcluster.cutoff_criterion= indexing.multiple_lattice_search.cluster_analysis.hcluster.linkage.";;

  indexing.multiple_lattice_search.cluster_analysis.*)
    H="indexing.multiple_lattice_search.cluster_analysis.dbscan. indexing.multiple_lattice_search.cluster_analysis.hcluster. indexing.multiple_lattice_search.cluster_analysis.intersection_union_ratio_cutoff= indexing.multiple_lattice_search.cluster_analysis.method= indexing.multiple_lattice_search.cluster_analysis.min_cluster_size=";;

  indexing.multiple_lattice_search.*)
    H="indexing.multiple_lattice_search.cluster_analysis. indexing.multiple_lattice_search.cluster_analysis_search= indexing.multiple_lattice_search.max_lattices= indexing.multiple_lattice_search.minimum_angular_separation= indexing.multiple_lattice_search.recycle_unindexed_reflections= indexing.multiple_lattice_search.recycle_unindexed_reflections_cutoff=";;

  indexing.basis_vector_combinations.filter.*)
    H="indexing.basis_vector_combinations.filter.check_doubled_cell= indexing.basis_vector_combinations.filter.likelihood_cutoff= indexing.basis_vector_combinations.filter.n_indexed_cutoff= indexing.basis_vector_combinations.filter.volume_cutoff=";;

  indexing.basis_vector_combinations.*)
    H="indexing.basis_vector_combinations.filter. indexing.basis_vector_combinations.max_try= indexing.basis_vector_combinations.solution_scorer= indexing.basis_vector_combinations.weighted.power=";;

  indexing.index_assignment.local.*)
    H="indexing.index_assignment.local.delta= indexing.index_assignment.local.epsilon= indexing.index_assignment.local.l_min= indexing.index_assignment.local.nearest_neighbours=";;

  indexing.index_assignment.*)
    H="indexing.index_assignment.local. indexing.index_assignment.method= indexing.index_assignment.simple.hkl_tolerance=";;

  indexing.refinement_protocol.outlier_rejection.*)
    H="indexing.refinement_protocol.outlier_rejection.maximum_phi_error= indexing.refinement_protocol.outlier_rejection.maximum_spot_error=";;

  indexing.refinement_protocol.*)
    H="indexing.refinement_protocol.d_min_final= indexing.refinement_protocol.d_min_start= indexing.refinement_protocol.d_min_step= indexing.refinement_protocol.disable_unit_cell_volume_sanity_check= indexing.refinement_protocol.n_macro_cycles= indexing.refinement_protocol.outlier_rejection. indexing.refinement_protocol.verbosity=";;

  indexing.known_symmetry.*)
    H="indexing.known_symmetry.absolute_angle_tolerance= indexing.known_symmetry.max_delta= indexing.known_symmetry.relative_length_tolerance= indexing.known_symmetry.space_group= indexing.known_symmetry.unit_cell=";;

  indexing.*)
    H="indexing.b_iso= indexing.basis_vector_combinations. indexing.debug= indexing.debug_plots= indexing.discover_better_experimental_model= indexing.fft3d. indexing.index_assignment. indexing.known_symmetry. indexing.max_cell= indexing.max_cell_multiplier= indexing.method= indexing.min_cell= indexing.mm_search_scope= indexing.multiple_lattice_search. indexing.nearest_neighbor_percentile= indexing.nproc= indexing.optimise_initial_basis_vectors= indexing.real_space_grid_search.characteristic_grid= indexing.refinement_protocol. indexing.rmsd_cutoff= indexing.scan_range= indexing.sigma_phi_deg= indexing.wide_search_binning=";;

  input.*)
    H="input.datablock= input.experiments= input.reflections=";;

  *)
    H="action= algorithm= cutoff= cutoff_criterion= d_min= d_min_final= d_min_start= d_min_step= datablock= eps= hkl_tolerance= indexing. input. intersection_union_ratio_cutoff= max_cell= max_cell_multiplier= maximum_phi_error= maximum_sample_size= maximum_spot_error= metric= min_cluster_size= min_nref_per_parameter= min_samples= minimum_number_of_reflections= minimum_sample_size= n_macro_cycles= output. refinement. reflections_per_degree= scan_range= scan_varying= separate_experiments= separate_panels= space_group= unindexed_reflections= unit_cell= use_all_reflections= verbosity=";;
 esac
}
