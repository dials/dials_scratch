import libtbx.load_env
Import("env_etc")

env_etc.dials_jmp_include = libtbx.env.dist_path("dials_jmp")
if (not env_etc.no_boost_python and hasattr(env_etc, "boost_adaptbx_include")):
    Import("env_no_includes_boost_python_ext")
    env = env_no_includes_boost_python_ext.Clone()
    env_etc.enable_more_warnings(env=env)
    env_etc.include_registry.append(
        env=env,
        paths=[
            env_etc.libtbx_include,
            env_etc.scitbx_include,
            env_etc.cctbx_include,
            env_etc.rstbx_include,
            env_etc.boost_adaptbx_include,
            env_etc.boost_include,
            env_etc.python_include,
            env_etc.dials_include,
            env_etc.dials_jmp_include])
    env.Append(
		LIBS=env_etc.libm + [ 
		"cctbx",
		"rstbx",
		"scitbx_boost_python"])

    env.SConscript('util/SConscript', exports={ 'env' : env })
    env.SConscript('reflection/SConscript', exports={ 'env' : env })
    env.SConscript('array_family/SConscript', exports={ 'env' : env })
    env.SConscript('equipment/SConscript', exports={ 'env' : env })
    env.SConscript('geometry/SConscript', exports={ 'env' : env })
    env.SConscript('spot_prediction/SConscript', exports={ 'env' : env })
    env.SConscript('integration/SConscript', exports={ 'env' : env })
